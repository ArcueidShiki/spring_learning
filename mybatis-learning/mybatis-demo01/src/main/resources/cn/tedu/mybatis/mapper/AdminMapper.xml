<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace 写 接口全类名 例如:cn.tedu.mybatis.mappers.UserMapper-->
<!-- 根节点必须是mapper -->
<!-- 根节点的namespace属性用于配置此XML对应哪个接口 -->
<mapper namespace="cn.tedu.mybatis.mapper.AdminMapper">
    <!-- 根据需要执行的SQL语句的种类选择需要配置的节点名称-->
    <!-- 配置SQL的节点的id属性取值为抽象方法名称 -->
    <!-- 在节点内部配置SQL语句 -->
    <!-- SQL语句中的参数值使用 #{} 格式的占位符表示 -->

    <!--开启时，自动给Admin类赋值id属性-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="true">
        insert into ams_admin (
        username, password, nickname, avatar,
        phone, email, description, is_enable,
        last_login_ip, login_count, gmt_last_login, gmt_create,
        gmt_modified
        ) values (
        #{username}, #{password}, #{nickname}, #{avatar},
        #{phone}, #{email}, #{description}, #{isEnable},
        #{lastLoginIp}, #{loginCount}, #{gmtLastLogin}, #{gmtCreate},#{gmtModified}
        )
    </insert>

    <delete id="deleteById">
        delete from ams_admin where id=#{id}
    </delete>

    <update id="updatePasswordById">
        update ams_admin set password=#{password} where id=#{id}
    </update>

    <select id="count" resultType="int">
        select count(*) from ams_admin;
    </select>

    <!--    <select id="getById" resultType="cn.tedu.mybatis.pojo.Admin">-->
    <!--        select * from ams_admin where id=#{id}-->
    <!--    </select>-->

    <!--    <select id="getById" resultMap="BaseResultMap">-->
    <!--        select * from ams_admin where id=#{id}-->
    <!--    </select>-->
    <!-- resultMap节点的作用是：指导Mybatis如何将结果集中的数据封装到返回的对象中 -->
    <!-- id属性：自定义名称 -->
    <!-- type属性：将结果集封装到哪种类型的对象中 -->
    <resultMap id="BaseResultMap" type="cn.tedu.mybatis.pojo.Admin">
        <!-- 使用若干个result节点配置名称不统一的对应关系 -->
        <!-- 在单表查询中，名称本来就一致的是不需要配置的 -->
        <!-- column属性：列名 -->
        <!-- property属性：属性名 -->
        <result column="is_enable" property="isEnable"/>
        <result column="last_login_ip" property="lastLoginIp"/>
        <result column="login_count" property="loginCount"/>
        <result column="gmt_last_login" property="gmtLastLogin"/>
        <result column="gmt_create" property="gmtCreate"/>
        <result column="gmt_modified" property="gmtModified"/>
    </resultMap>

    <select id="list" resultMap="BaseResultMap">
        select * from ams_admin order by id
    </select>

    <delete id="deleteByIds">
        delete from ams_admin where id in (
        <foreach collection="array" item="id" separator=",">
            #{id}
        </foreach>
        )
    </delete>

    <sql id="SelectedFields">
        <if test="true">
            id,username,password
        </if>
    </sql>
    <select id="getById" resultType="cn.tedu.mybatis.pojo.Admin">
        select
        <include refid="SelectedFields"/>
        from ams_admin where id=#{id}
    </select>


    <resultMap id="DetailsResultMap" type="cn.tedu.mybatis.vo.AdminDetailsVO">
        <!-- 在1对多、多对多的查询中，即使名称匹配的结果，也必须显式的配置 -->
        <!-- 主键字段的结果必须使用id节点进行配置，配置方式与result节点完全相同 -->
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="nickname" property="nickname"/>
        <result column="avatar" property="avatar"/>
        <result column="phone" property="phone"/>
        <result column="email" property="email"/>
        <result column="description" property="description"/>
        <result column="is_enable" property="isEnable"/>
        <result column="last_login_ip" property="lastLoginIp"/>
        <result column="login_count" property="loginCount"/>
        <result column="gmt_last_login" property="gmtLastLogin"/>
        <result column="gmt_create" property="gmtCreate"/>
        <result column="gmt_modified" property="gmtModified"/>
        <!-- 需要使用collection节点配置1对多中“多”的数据 -->
        <collection property="roles" ofType="cn.tedu.mybatis.pojo.Role">
            <id column="role_id" property="id"/>
            <result column="role_name" property="name"/>
            <result column="role_description" property="description"/>
            <result column="role_sort" property="sort"/>
            <result column="role_gmt_create" property="gmtCreate"/>
            <result column="role_gmt_modified" property="gmtModified"/>
        </collection>
        <collection property="permission" ofType="cn.tedu.mybatis.pojo.Permission">
            <id column="permission_id" property="id"/>
            <result column="permission_name" property="name"/>
            <result column="permission_value" property="value"/>
            <result column="permission_description" property="description"/>
            <result column="permission_sort" property="sort"/>
            <result column="permission_gmt_create" property="gmtCreate"/>
            <result column="permission_gmt_modified" property="gmtModified"/>
        </collection>
    </resultMap>
    <sql id="DetailsQueryFields">
        <if test="true">
            ams_admin.id,
            ams_admin.username,
            ams_admin.password,
            ams_admin.nickname,
            ams_admin.avatar,
            ams_admin.phone,
            ams_admin.email,
            ams_admin.description,
            ams_admin.is_enable,
            ams_admin.last_login_ip,
            ams_admin.login_count,
            ams_admin.gmt_last_login,
            ams_admin.gmt_create,
            ams_admin.gmt_modified,
            ams_role.id AS role_id,
            ams_role.name AS role_name,
            ams_role.description AS role_description,
            ams_role.sort AS role_sort,
            ams_role.gmt_create AS role_gmt_create,
            ams_role.gmt_modified AS role_gmt_modified,
            ams_permission.id as permission_id,
            ams_permission.name as permission_name,
            ams_permission.value as permission_value,
            ams_permission.description as permission_description,
            ams_permission.sort as permission_sort,
            ams_permission.gmt_create as permission_gmt_creat,
            ams_permission.gmt_modified as permission_gmt_modified
        </if>
    </sql>
    <sql id="DetailsSelectedFields">
        <if test="true">
            ams_admin.id,
            ams_admin.username,
            ams_role.name AS role_name,
            ams_permission.name as permission_name,
            ams_permission.value as permission_value,
            ams_permission.description as permission_description
        </if>
    </sql>
    <select id="getDetailsById" resultMap="DetailsResultMap">
        select
        <include refid="DetailsQueryFields"/>
        from ams_admin
        left join ams_admin_role on ams_admin.id=ams_admin_role.admin_id
        left join ams_role on ams_admin_role.role_id=ams_role.id
        left join ams_role_permission on ams_role_permission.role_id=ams_role.id
        left join ams_permission on ams_permission.id=ams_role_permission.permission_id
        where ams_admin.id=#{id}
    </select>

</mapper>